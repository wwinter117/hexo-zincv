<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在 M1 Pro 芯片的 macOS 上编译 JDK 17</title>
      <link href="/2024/10/01/%E5%9C%A8%20M1%20Pro%20%E8%8A%AF%E7%89%87%E7%9A%84%20macOS%20%E4%B8%8A%E7%BC%96%E8%AF%91%20JDK%2017/"/>
      <url>/2024/10/01/%E5%9C%A8%20M1%20Pro%20%E8%8A%AF%E7%89%87%E7%9A%84%20macOS%20%E4%B8%8A%E7%BC%96%E8%AF%91%20JDK%2017/</url>
      
        <content type="html"><![CDATA[<p><img src="https://zincv.oss-cn-hangzhou.aliyuncs.com/Snipaste_2024-10-01_16-33-12.png" alt="jdk17u"></p><h2 id="为什么编译jdk17u这个版本"><a href="#为什么编译jdk17u这个版本" class="headerlink" title="为什么编译jdk17u这个版本"></a>为什么编译jdk17u这个版本</h2><p><code>JDK 8</code> 最早发布时，主要支持的是 <code>x86</code> 和 <code>x64</code> 架构的系统。<code>Apple M1 Pro</code> 芯片使用的是 <code>AArch64</code> 架构，而 <code>JDK 8</code> 并没有对 <code>macOS/AArch64</code> 提供原生支持，需要使用<code>Rosetta 2</code> 转译工具在 <code>M1 Pro </code>芯片上运行基于 <code>x86_64</code> 架构的 <code>JDK 8</code>。</p><p><code>JDK 17</code> 已经为 <code>macOS/AArch64</code> 提供了原生支持，性能和兼容性都更好。</p><ul><li><a href="https://openjdk.java.net/jeps/306">JEP 306: Restore Always-Strict Floating-Point Semantics</a></li><li><a href="https://openjdk.java.net/jeps/356">JEP 356: Enhanced Pseudo-Random Number Generators</a></li><li><a href="https://openjdk.java.net/jeps/382">JEP 382: New macOS Rendering Pipeline</a></li><li><a href="https://openjdk.java.net/jeps/391">JEP 391: macOS&#x2F;AArch64 Port</a></li><li><a href="https://openjdk.java.net/jeps/398">JEP 398: Deprecate the Applet API for Removal</a></li><li><a href="https://openjdk.java.net/jeps/403">JEP 403: Strongly Encapsulate JDK Internals</a></li><li><a href="https://openjdk.java.net/jeps/406">JEP 406: Pattern Matching for switch (Preview)</a></li><li><a href="https://openjdk.java.net/jeps/407">JEP 407: Remove RMI Activation</a></li><li><a href="https://openjdk.java.net/jeps/409">JEP 409: Sealed Classes</a></li><li><a href="https://openjdk.java.net/jeps/410">JEP 410: Remove the Experimental AOT and JIT Compiler</a></li><li><a href="https://openjdk.java.net/jeps/411">JEP 411: Deprecate the Security Manager for Removal</a></li><li><a href="https://openjdk.java.net/jeps/412">JEP 412: Foreign Function &amp; Memory API (Incubator)</a></li><li><a href="https://openjdk.java.net/jeps/414">JEP 414: Vector API (Second Incubator)</a></li><li><a href="https://openjdk.java.net/jeps/415">JEP 415: Context-Specific Deserialization Filters</a></li></ul><p>其中 <code>JEP 391</code>的增强是专门为了支持 <code>macOS/AArch64</code>（即 <code>M</code> 系列芯片）的，因此从 <code>JDK 17</code> 开始，编译 <code>JDK</code> 会充分利用 <code>M1</code> 芯片的架构优势，而不需要依赖 <code>Rosetta 2</code> 来进行<code> x86</code> 到 <code>ARM</code> 的转译。</p><p>详细的构建流程查看<code>openjdk</code>官方： <a href="https://github.com/openjdk/jdk17u/blob/master/doc/building.md">https://github.com/openjdk/jdk17u/blob/master/doc/building.md</a></p><p>接下来是在 <code>m1pro</code> 芯片的 <code>macos</code> 上的编译过程</p><h2 id="编译环境准备"><a href="#编译环境准备" class="headerlink" title="编译环境准备"></a>编译环境准备</h2><p><strong>bootjdk</strong></p><p>遵循<code>N-1</code>，使用<code>jdk16</code>编译<code>jdk17u</code></p><pre><code class="hljs plaintext"># 下载jdk16来编译jdk17ubrew install --cask adoptopenjdk/openjdk/adoptopenjdk16# 获取 JDK 16 的安装路径（无需将其加入环境变量）/usr/libexec/java_home -v 16# 一般以上命令会输出以下路径，记录下这个路径，后面编译时指定这个路径/Library/Java/JavaVirtualMachines/adoptopenjdk-16.jdk/Contents/Home</code></pre><p><strong>xcode</strong></p><p>重要：使用推荐的<code>13.1</code>的这个版本</p><p>如果你的<code>Xcode</code>不是这个版本可以按照下面流程进行下载：</p><pre><code class="hljs plaintext"># apple官网下载版本13.1版本的Xcode（以下链接下载，需要登录）https://developer.apple.com/download/all/?q=13.1# 解压（或者双击解压）xip --expand Xcode_13.1.xip# 记录下解压后的路径，一般以下是用户目录下的Download路径：～/Downloads/Xcode.app</code></pre><p><strong>freetype</strong></p><pre><code class="hljs plaintext">brew install freetype</code></pre><p><strong>autoconf</strong></p><pre><code class="hljs plaintext">brew install autoconf</code></pre><h3 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h3><p><strong>ssh:</strong></p><pre><code class="hljs plaintext">git clone git@github.com:openjdk/jdk17u.git</code></pre><p><strong>https:</strong></p><pre><code class="hljs plaintext">git clone https://github.com/openjdk/jdk17u.git</code></pre><h2 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h2><p>进入源码目录，输入：</p><pre><code class="hljs plaintext">sh configure --with-boot-jdk=/Library/Java/JavaVirtualMachines/adoptopenjdk-16.jdk/Contents/Home/ --with-xcode-path=/Users/zhangdongdong/Downloads/Xcode.appsh configure --with-boot-jdk=/Library/Java/JavaVirtualMachines/adoptopenjdk-16.jdk/Contents/Home/ --with-xcode-path=/Applications/Xcode.app</code></pre><p>其中</p><p><code>--with-boot-jdk=</code> 后面指定刚才下载的jdk16的路径<br><code>--with-xcode-path=</code> 后面指定刚才下载的Xcode路径</p><p>成功会出现类似于以下内容：</p><pre><code class="hljs plaintext">====================================================A new configuration has been successfully created in/Users/zhangdongdong/dev/github/x/jdk17u/build/macosx-aarch64-server-releaseusing configure arguments &#x27;--with-boot-jdk=/Library/Java/JavaVirtualMachines/adoptopenjdk-16.jdk/Contents/Home/ --with-boot-jdk-jvmargs=-Xmx4096M --with-xcode-path=/Users/zhangdongdong/Downloads/Xcode.app&#x27;.Configuration summary:* Name:           macosx-aarch64-server-release* Debug level:    release* HS debug level: product* JVM variants:   server* JVM features:   server: &#x27;cds compiler1 compiler2 dtrace epsilongc g1gc jfr jni-check jvmci jvmti management nmt parallelgc serialgc services shenandoahgc vm-structs zgc&#x27; * OpenJDK target: OS: macosx, CPU architecture: aarch64, address length: 64* Version string: 17.0.13-internal+0-adhoc.zhangdongdong.jdk17u (17.0.13-internal)Tools summary:* Boot JDK:       openjdk version &quot;16.0.1&quot; 2021-04-20 OpenJDK Runtime Environment AdoptOpenJDK-16.0.1+9 (build 16.0.1+9) OpenJDK 64-Bit Server VM AdoptOpenJDK-16.0.1+9 (build 16.0.1+9, mixed mode, sharing) (at /Library/Java/JavaVirtualMachines/adoptopenjdk-16.jdk/Contents/Home)* Toolchain:      clang (clang/LLVM from Xcode 13.1)* C Compiler:     Version 13.0.0 (at /Users/zhangdongdong/Downloads/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang)* C++ Compiler:   Version 13.0.0 (at /Users/zhangdongdong/Downloads/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++)Build performance summary:* Cores to use:   8* Memory limit:   16384 MBThe following warnings were produced. Repeated here for convenience:</code></pre><p>可以看见已经配置了<code>bootjdk</code>为<code>jdk16.0.1</code>，<code>Xcode</code>版本为<code>13.1</code></p><p>然后可以输入下面命令，开始编译：</p><pre><code class="hljs plaintext">make images</code></pre><p>等待一段时间后，编译成功会输出以下内容：</p><pre><code class="hljs plaintext">...Creating jdk imageCreating CDS archive for jdk imageCreating CDS-NOCOOPS archive for jdk imageStopping sjavac serverFinished building target &#x27;images&#x27; in configuration &#x27;macosx-aarch64-server-release&#x27;</code></pre><h2 id="idea中验证"><a href="#idea中验证" class="headerlink" title="idea中验证"></a>idea中验证</h2><p>投稿视频中演示</p>]]></content>
      
      
      
        <tags>
            
            <tag> jdk </tag>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/01/hello-world/"/>
      <url>/2024/10/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/10/01/%E6%AC%A2%E8%BF%8E/"/>
      <url>/2024/10/01/%E6%AC%A2%E8%BF%8E/</url>
      
        <content type="html"><![CDATA[<p>这是你的新<em>仓库</em>。</p><p>写点笔记，[[创建链接]]，或者试一试<a href="https://help.obsidian.md/Plugins/Importer">导入器</a>插件!</p><p>当你准备好了，就将该笔记文件删除，使这个仓库为你所用。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
